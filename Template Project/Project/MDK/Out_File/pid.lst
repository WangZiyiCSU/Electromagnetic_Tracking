C251 COMPILER V5.60.0,  pid                                                                01/11/23  17:00:46  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pid
OBJECT MODULE PLACED IN .\Out_File\pid.obj
COMPILER INVOKED BY: D:\Software\Keil_v5\C251\BIN\C251.EXE ..\USER\src\pid.c XSMALL UNSIGNED_CHAR WARNINGLEVEL(3) BROWSE
                    - INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER
                    -\inc;..\USER\src) DEBUG PRINT(.\Out_File\pid.lst) OBJECT(.\Out_File\pid.obj) 

stmt  level    source

    1          /* Includes ------------------------------------------------------------------*/
    2          #include "pid.h"
    3          #include "zf_pwm.h"
    4          #include "math.h"
    5          /* Includes ------------------------------------------------------------------*/
    6          
    7          //Servo servo;
    8          #define PID_DUTY_MAX 9000
    9          //设置pid参数
   10          void Set_Pid(Servo *servo,float kp,float kd,float ki){
   11   1              servo->kp = kp;
   12   1              servo->kd = kd;
   13   1              servo->ki = ki;
   14   1      }
   15          void Set_Pid1(Servo *servo,float kp,float kd,float ki){
   16   1              servo->kp = kp;
   17   1              servo->kd = kd+5;
   18   1              servo->ki = ki;
   19   1      }
   20          
   21          void  Clear_PID_Para(Servo *servo)
   22          {
   23   1              servo->error_Now = 0;
   24   1              servo->error_Last = 0;
   25   1      }
   26          
   27          void Set_Pd(PD_LOOP *pd,float kp,float kd){
   28   1        pd->kp = kp;
   29   1        pd->kd = kd;
   30   1      }
   31          
   32          //积分分离阈值
   33          #define SPE_INTEGRAL_START_ERR 100
   34          #define SPE_INTEGRAL_MAX_VAL 4000
   35          //位置式PID控制器
   36          void Position_PID_Caculate(PD_LOOP *pid)
   37          { 
   38   1        //计算偏差
   39   1        pid->error_Now = pid->current - pid->expected;
   40   1        /*积分项，积分分离，偏差较大时去掉积分作用*/
   41   1        if(pid->error_Now > -SPE_INTEGRAL_START_ERR && pid->error_Now < SPE_INTEGRAL_START_ERR) //阈值范围内 使
             -用积分
   42   1        {
   43   2            pid->integral += pid->error_Now;  
   44   2            /*积分范围限定，防止积分饱和*/
   45   2            if(pid->integral > SPE_INTEGRAL_MAX_VAL)
   46   2            {
   47   3                pid->integral = SPE_INTEGRAL_MAX_VAL;
   48   3            }
   49   2            else if(pid->integral < -SPE_INTEGRAL_MAX_VAL)
   50   2            {
   51   3                pid->integral = -SPE_INTEGRAL_MAX_VAL;
   52   3            }
   53   2        }
   54   1        // else
   55   1        // {
   56   1        //   pid->integral = 0;//偏差较大 不使用积分
C251 COMPILER V5.60.0,  pid                                                                01/11/23  17:00:46  PAGE 2   

   57   1        // }   
   58   1      
   59   1        //计算输出
   60   1        pid->duty = pid->kp*pid->error_Now +                   //比例
   61   1                    pid->ki*pid->integral  +                   //积分
   62   1                    pid->kd*(pid->error_Now - pid->error_Last);  //微分
   63   1      
   64   1        pid->error_Last = pid->error_Now;
   65   1      }
   66          
   67          //位置式PD控制器
   68          void Position_PD_Caculate(PD_LOOP *pd)
   69          { 
   70   1        //计算偏差
   71   1        pd->error_Now = pd->current - pd->expected;
   72   1        //计算输出
   73   1        pd->duty = pd->kp*pd->error_Now + pd->kd*(pd->error_Now - pd->error_Last);
   74   1        pd->error_Last = pd->error_Now;
   75   1      }
   76          
   77          //增量式PID控制器
   78          void Incremental_PID_Caculate(PD_LOOP *pid)
   79          {
   80   1        //计算偏差
   81   1        pid->error_Now = pid->expected-pid->current ;
   82   1        //计算输出
   83   1        pid->duty += (  pid->kp*(pid->error_Now - pid->error_Last)+
   84   1                        pid->ki*pid->error_Now +
   85   1                        pid->kd*(pid->error_Now+pid->error_LastLast-2*pid->error_Last)
   86   1                      );
   87   1      
   88   1        pid->error_Last = pid->error_Now;
   89   1        pid->error_LastLast = pid->error_Last;          
   90   1        //死区
   91   1        //if(abs(pid->current)<1)pid->duty = 0;
   92   1        if(pid->duty > PID_DUTY_MAX)pid->duty = PID_DUTY_MAX;
   93   1        else if(pid->duty < -PID_DUTY_MAX)pid->duty = -PID_DUTY_MAX;
   94   1      }
   95          
   96          
   97          
   98          void ServoPID_Caculate(Servo *servo)
   99          {
  100   1        //servo->duty = SERVO_DUTY_MIDDLE + (servo->kp*servo->error_Now + servo->kd*(servo->error_Now - servo->
             -error_Last));
  101   1        servo->duty = servo->kp*servo->error_Now + servo->kd*(servo->error_Now - servo->error_Last);
  102   1        // if(servo->duty > 3000)servo->duty = SERVO_DUTY_MAX;
  103   1        // if(servo->duty < SERVO_DUTY_MINI)servo->duty = SERVO_DUTY_MINI;
  104   1        servo->error_Last = servo->error_Now;
  105   1      }
  106          //舵机输出
  107          void Servo_Out(int duty){
  108   1        if(duty > SERVO_DUTY_MAX)duty = SERVO_DUTY_MAX;
  109   1        if(duty < SERVO_DUTY_MINI)duty = SERVO_DUTY_MINI;
  110   1              pwm_duty(PWMB_CH4_P77, duty);
  111   1      }
  112          /******************************************************************************
  113          **********舵机初始化函数
  114          2017.3.13 MonkeyKing
  115          ******************************************************************************/
  116          void Servo_Init(Servo *servo)
  117          {
  118   1        servo->duty           = SERVO_DUTY_MIDDLE;
  119   1        servo->error_Now      = 0;
  120   1        servo->error_Last     = 0;
  121   1        servo->kp             = 1;
C251 COMPILER V5.60.0,  pid                                                                01/11/23  17:00:46  PAGE 3   

  122   1        servo->ki             = 0;
  123   1        servo->kd             = 0;
  124   1      //  FTM_PWM_init(FTM1 , CH0, 100,SERVO_DUTY_MIDDLE);//初始化时，舵机对中
  125   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       883     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         20
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
