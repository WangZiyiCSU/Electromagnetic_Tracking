C251 COMPILER V5.60.0,  adc                                                                01/11/23  17:00:47  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE adc
OBJECT MODULE PLACED IN .\Out_File\adc.obj
COMPILER INVOKED BY: D:\Software\Keil_v5\C251\BIN\C251.EXE ..\USER\src\adc.c XSMALL UNSIGNED_CHAR WARNINGLEVEL(3) BROWSE
                    - INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER
                    -\inc;..\USER\src) DEBUG PRINT(.\Out_File\adc.lst) OBJECT(.\Out_File\adc.obj) 

stmt  level    source

    1          #include "math.h"
    2          #include "headfile.h"
    3          void ADC_Process(ADC_Parameter* adc) //均值滤波
    4          {
    5   1              uint8 i;
    6   1              //采集十次电感
    7   1              for(i = 0; i < SAMPLING_TIMES; i++)
    8   1              {
    9   2                      adc->adc_original[LEFT_H][i]  = adc_once(ADC_P00, ADC_12BIT);  //左横
   10   2                      adc->adc_original[LEFT_X][i]  = 0;                                                                 //左斜
   11   2                      adc->adc_original[MIDDLE][i]  = adc_once(ADC_P06, ADC_12BIT);  //中间
   12   2                      adc->adc_original[RIGHT_X][i] = 0;                                                                     //右斜
   13   2                      adc->adc_original[RIGHT_H][i] = adc_once(ADC_P05, ADC_12BIT);  //右横
   14   2              }       
   15   1              
   16   1              //采样值从小到大排列（冒泡法）
   17   1              Bubble_Sort(adc->adc_original[LEFT_H] ,SAMPLING_TIMES);    //左横
   18   1              Bubble_Sort(adc->adc_original[MIDDLE] ,SAMPLING_TIMES);    //中间
   19   1              Bubble_Sort(adc->adc_original[RIGHT_H],SAMPLING_TIMES);    //右横
   20   1      
   21   1              //去除最大最小极值求和
   22   1              for(i = 1; i < SAMPLING_TIMES - 1; i++)
   23   1              {
   24   2                      adc->adc_ave[LEFT_H]  += adc->adc_original[LEFT_H][i];
   25   2                      adc->adc_ave[LEFT_X]  += 0;
   26   2                      adc->adc_ave[MIDDLE]  += adc->adc_original[MIDDLE][i];
   27   2                      adc->adc_ave[RIGHT_X] += 0;
   28   2                      adc->adc_ave[RIGHT_H] += adc->adc_original[RIGHT_H][i];
   29   2              }
   30   1              //求平均
   31   1              for(i = 0; i < INDUCTOR_NUM; i++)
   32   1              {
   33   2                      adc->adc_ave[i] = adc->adc_ave[i]/(SAMPLING_TIMES-2);
   34   2              }
   35   1      }
   36          
   37          //冒泡排序
   38          void Bubble_Sort(uint16 ad[],int len)
   39          {
   40   1              int i,j;
   41   1              int filter_temp;
   42   1              for(j = 0; j < len - 1; j++)
   43   1          {
   44   2              for(i = 0; i < len - 1 - j; i++)
   45   2              {
   46   3                  if(ad[i] > ad[i + 1])
   47   3                  {
   48   4                      filter_temp = ad[i];
   49   4                      ad[i] = ad[i + 1];
   50   4                      ad[i + 1] = filter_temp;
   51   4                  }
   52   3              }
   53   2          }
   54   1      }
   55          
   56          //归一化运算
   57          void ADC_Normalization(ADC_Parameter* adc)
C251 COMPILER V5.60.0,  adc                                                                01/11/23  17:00:47  PAGE 2   

   58          {
   59   1              int i;
   60   1              float AD_Normalized[INDUCTOR_NUM];
   61   1              for(i=0;i<INDUCTOR_NUM;i++)
   62   1              {
   63   2      
   64   2                      if(adc->adc_ave[i]<adc->adc_min[i])AD_Normalized[i]=0.01;
   65   2                      else
   66   2                      {
   67   3                              AD_Normalized[i]=(float)(adc->adc_ave[i]-adc->adc_min[i])/(float)(adc->adc_max[i]-adc->adc_min[i]);
   68   3                      }
   69   2                      if(AD_Normalized[i]>1.0)
   70   2                      {
   71   3                                      AD_Normalized[i]=1.0;
   72   3                      }
   73   2                      AD_Normalized[i]=100 * AD_Normalized[i];  //AD[i]归一化后的值，0-100之间
   74   2                      adc->adc_normalized[i] = AD_Normalized[i];
   75   2              }
   76   1              adc->H_strength = adc->adc_normalized[LEFT_H]+adc->adc_normalized[RIGHT_H];
   77   1              adc->X_strength = adc->adc_normalized[LEFT_X]+adc->adc_normalized[RIGHT_X];
   78   1              adc->adc_strength =adc->H_strength+adc->adc_normalized[MIDDLE];
   79   1      }
   80          
   81          #define ERROR_MAX 100
   82          //差比和
   83          void  get_error_normal(ADC_Parameter* adc)
   84          {
   85   1              //横电感计算偏差 = 调整系数 *（左平均 - 右平均）/ （（左平均 + 中平均 + 右平均）* 中归一）
   86   1              adc->adc_error = car.adc_parameter.error_caculate
   87   1                           * (adc->adc_normalized[LEFT_H] - adc->adc_normalized[RIGHT_H])
   88   1                                               / ((adc->adc_normalized[LEFT_H] +adc->adc_normalized[MIDDLE]+adc->adc_normalized[RIGHT_H])*adc->adc
             -_normalized[MIDDLE]);
   89   1      
   90   1              // if(adc->adc_normalized[LEFT_H]>5 && adc->adc_normalized[RIGHT_H]<5)adc->adc_error = ERROR_MAX;
   91   1              // else if(adc->adc_normalized[LEFT_H]<5 && adc->adc_normalized[RIGHT_H]>5)adc->adc_error = -ERROR_MAX;
   92   1              //偏差限幅
   93   1              if(adc->adc_error>ERROR_MAX)adc->adc_error=ERROR_MAX;
   94   1              else if(adc->adc_error<-ERROR_MAX)adc->adc_error=-ERROR_MAX;
   95   1      }
   96          
   97          //去绝对值
   98          float my_abs(float error)
   99          {
  100   1              if(error < 0)
  101   1              error = -error;
  102   1              return error;
  103   1      }
  104          //范围判定
  105          int Limit_min_max(uint16 num,uint16 min,uint16 max)
  106          {  //上下限幅
  107   1              if(num > max || num < min )return 0;
  108   1              return   1;
  109   1      }
  110          
  111          
  112          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       861     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
C251 COMPILER V5.60.0,  adc                                                                01/11/23  17:00:47  PAGE 3   

  edata size           =    ------         21
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
