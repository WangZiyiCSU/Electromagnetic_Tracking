C251 COMPILER V5.60.0,  zf_eeprom                                                          01/11/23  17:00:40  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_eeprom
OBJECT MODULE PLACED IN .\Out_File\zf_eeprom.obj
COMPILER INVOKED BY: D:\Software\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_eeprom.c XSMALL UNSIGNE
                    -D_CHAR WARNINGLEVEL(3) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfr
                    -ee_peripheral;..\CODE;..\USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\zf_eeprom.lst) OBJECT(.\Out_File\zf_eeprom.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                eeprom
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2020-4-14
   18           ********************************************************************************************************
             -************/
   19          #include "zf_eeprom.h"
   20          #include "board.h"
   21          #include "intrins.h"
   22          
   23          
   24          //-------------------------------------------------------------------------------------------------------
             -------------
   25          //  @brief      EEPROM触发操作，
   26          //  @param      
   27          //  @return     void
   28          //  Sample usage:                       内部使用用户无需关心
   29          //-------------------------------------------------------------------------------------------------------
             -------------
   30          void eeprom_trig(void)
   31          {
   32   1          F0 = EA;    //保存全局中断
   33   1          EA = 0;     //禁止中断, 避免触发命令无效
   34   1          IAP_TRIG = 0x5A;
   35   1          IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
   36   1                                              //送完A5H后，IAP命令立即被触发启动
   37   1                                              //CPU等待IAP完成后，才会继续执行程序。
   38   1          _nop_();   //由于STC32G是多级流水线的指令系统，触发命令后建议加4个NOP，保证IAP_DATA的数据完成准备
   39   1          _nop_();
   40   1          _nop_();
   41   1          _nop_();
   42   1          EA = F0;    //恢复全局中断
   43   1      }
   44          
   45          
   46          //-------------------------------------------------------------------------------------------------------
             -------------
   47          //  @brief      初始化EEPROM
   48          //  @param      NULL
   49          //  @return     void
   50          //  Sample usage:           
   51          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  zf_eeprom                                                          01/11/23  17:00:40  PAGE 2   

   52          void iap_init(void)
   53          {
   54   1              IAP_CONTR |= 1<<7;              //使能EEPROM操作
   55   1              iap_set_tps();                  //设置擦除等待时间
   56   1      }
   57          
   58          //-------------------------------------------------------------------------------------------------------
             -------------
   59          //  @brief      关闭EEPROM
   60          //  @param      NULL
   61          //  @return     void
   62          //  Sample usage:           
   63          //-------------------------------------------------------------------------------------------------------
             -------------
   64          void iap_idle(void)
   65          {
   66   1              IAP_CONTR &= ~(1<<7);//失能EEPROM操作
   67   1      }
   68          
   69          
   70          //-------------------------------------------------------------------------------------------------------
             -------------
   71          //  @brief      获取EEPROM操作失败状态位，需要软件清零
   72          //  @param      NULL
   73          //  @return     void
   74          //  Sample usage:           
   75          //                                                              操作失败返回1;
   76          //-------------------------------------------------------------------------------------------------------
             -------------
   77          uint8 iap_get_cmd_state(void)
   78          {
   79   1              return ((IAP_CONTR&0x01) == 0x01);
   80   1      }
   81          
   82          
   83          //-------------------------------------------------------------------------------------------------------
             -------------
   84          //  @brief      设置IAP等待时间
   85          //  @param      NULL
   86          //  @return     void
   87          //  Sample usage:           
   88          //-------------------------------------------------------------------------------------------------------
             -------------
   89          void iap_set_tps(void)
   90          {
   91   1              uint8 write_time;
   92   1              write_time = (sys_clk / 1000000) + 1;
   93   1              IAP_TPS = write_time;
   94   1      }
   95          
   96          
   97          //-------------------------------------------------------------------------------------------------------
             -------------
   98          //  @brief      EEPROM读取多个字节
   99          //  @param      addr                    需要读取的eeprom地址
  100          //  @param      *buf                    需要读取的数据地址
  101          //  @param      len                             需要读取的数据长度
  102          //  @return     void
  103          //  Sample usage:               uint8 str[10];
  104          //                                                              iap_read_bytes(0x00,str,10);
  105          //                                                              将0x00-0x0A地址中的数据，读取到str中。
  106          //-------------------------------------------------------------------------------------------------------
             -------------
  107          void iap_read_bytes(uint16 addr, uint8 *buf, uint16 len)
  108          {
  109   1              IAP_CMD = 1;                            //设置 IAP 读命令       
C251 COMPILER V5.60.0,  zf_eeprom                                                          01/11/23  17:00:40  PAGE 3   

  110   1      
  111   1              while(len--)
  112   1              {
  113   2              IAP_ADDRE = 0;
  114   2                      IAP_ADDRL = addr;               //设置 IAP 低地址
  115   2                      IAP_ADDRH = addr >> 8;  //设置 IAP 高地址
  116   2              eeprom_trig();
  117   2                      *buf++ = IAP_DATA;              //读 IAP 数据
  118   2                      addr++;
  119   2                      
  120   2              }
  121   1      }
  122          //-------------------------------------------------------------------------------------------------------
             -------------
  123          //  @brief      EEPROM写多个字节
  124          //  @param      addr                    需要写的eeprom地址
  125          //  @param      *buf                    需要写的数据地址
  126          //  @param      len                             需要写的数据长度
  127          //  @return     void
  128          //  Sample usage:                       iap_write_bytes(0x00,(uint8 *)"0123456789",10);
  129          //                                                              将"0123456789"写入0x00-0x0A地址中;
  130          //-------------------------------------------------------------------------------------------------------
             -------------
  131          void iap_write_bytes(uint16 addr, uint8 *buf, uint16 len)
  132          {
  133   1              IAP_CMD = 2;                            //设置 IAP 读命令       
  134   1              
  135   1              while(len--)
  136   1              {
  137   2              IAP_ADDRE = 0;
  138   2                      IAP_ADDRL = addr;               //设置 IAP 低地址
  139   2                      IAP_ADDRH = addr >> 8;  //设置 IAP 高地址
  140   2                      IAP_DATA = *buf++;              //写 IAP 数据
  141   2                      addr++;
  142   2      
  143   2                      eeprom_trig();
  144   2              }
  145   1      }
  146          
  147          
  148          
  149          //-------------------------------------------------------------------------------------------------------
             -------------
  150          //  @brief      EEPROM擦除目标地址所在的一页（1扇区/512字节）
  151          //  @param      addr                    需要写的eeprom地址
  152          //  @return     void
  153          //  Sample usage:                       iap_erase(0x20);
  154          //                                                              擦除0x00-0x200的数据
  155          //-------------------------------------------------------------------------------------------------------
             -------------
  156          void iap_erase_page(uint16 addr) 
  157          { 
  158   1              IAP_CMD = 3;                            //设置 IAP 擦除命令
  159   1              IAP_ADDRL = addr;                       //设置 IAP 低地址
  160   1              IAP_ADDRH = addr >> 8;          //设置 IAP 高地址
  161   1          eeprom_trig();
  162   1      
  163   1      }
  164          
  165          
  166          
  167          //-------------------------------------------------------------------------------------------------------
             -------------
  168          //  @brief      扩展EEPROM写多个字节(无需擦除)
  169          //  @param      addr                    需要写的eeprom地址
  170          //  @param      *buf                    需要写的数据地址
C251 COMPILER V5.60.0,  zf_eeprom                                                          01/11/23  17:00:40  PAGE 4   

  171          //  @param      len                             需要写的数据长度
  172          //  @return     void
  173          //  Sample usage:                       extern_iap_write_bytes(0x0000,(uint8 *)"0123456789";,10);
  174          //                                                              将"0123456789"写入0x00-0x0A地址中;
  175          //      @note：                                         不要跨扇区使用。
  176          //                                                              addr地址：0-511为一个扇区,512-1023为一个扇区，1024-1535为一个扇区，依次类推。
  177          //-------------------------------------------------------------------------------------------------------
             -------------
  178          void extern_iap_write_bytes(uint16 addr, uint8 *buf, uint16 len)
  179          { 
  180   1              uint8 temp[512];
  181   1              uint16 i;
  182   1              
  183   1              for(i=0; i<512 ;i++)    temp[i] = 0;                    //清0
  184   1              iap_read_bytes(addr&0xFE00, temp, 512);                 //读取
  185   1              for(i=0; i<len; i++)    temp[(addr&0x1FF) + i] = buf[i];        //改
  186   1              iap_erase_page(addr);                                                   //擦除
  187   1              iap_write_bytes(addr&0xFE00, temp, 512);                //写入
  188   1      }
  189          
  190          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       330     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------        524
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
