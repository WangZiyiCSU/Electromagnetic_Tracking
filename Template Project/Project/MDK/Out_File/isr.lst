C251 COMPILER V5.60.0,  isr                                                                01/11/23  17:00:44  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\Software\Keil_v5\C251\BIN\C251.EXE ..\USER\src\isr.c XSMALL UNSIGNED_CHAR WARNINGLEVEL(3) BROWSE
                    - INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER
                    -\inc;..\USER\src) DEBUG PRINT(.\Out_File\isr.lst) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          #include "zf_uart.h"
    2          #include "headfile.h"
    3          #include "control.h"
    4          #include "car.h"
    5          #include "garage.h"
    6          
    7          #define PI 3.1415926
    8          extern void pit_handler(void);
    9          void TM4_Isr() interrupt 20 
   10          {
   11   1              static int dutyerror=0;
   12   1              static int lose = 0;
   13   1              static float temp_error=0;
   14   1              static int count = 0;
   15   1              static int count_10ms = 0;
   16   1              static int count_2s = 0;
   17   1          static int type_temp = 0;
   18   1              TIM4_CLEAR_FLAG; //Çå³ýÖÐ¶Ï±êÖ¾
   19   1              //pit_handler();
   20   1      //      if(USART4_RX_LEN > 0 )return;
   21   1      //      USART4_RX_STA = REFUSE_TO_RECEIVE;
   22   1              
   23   1              switch(car.work_mode)
   24   1              {
   25   2                      case NORMAL:    //ÆÕÍ¨Ñ°¼£Ä£Ê½
   26   2                      {
   27   3                              Normal_Tracing(); //ÆÕÍ¨ÈüµÀÑ°¼£
   28   3                              break;
   29   3                      }
   30   2                      case SCAN:              //É¨ÃèÈüµÀÄ£Ê½
   31   2                      {
   32   3                              //AD_Scan(&car.adc_parameter);  //É¨ÃèÈüµÀµÃ¸÷¸öµç¸Ð×î´óÖµ
   33   3                              break;
   34   3                      }
   35   2                      case TEST:
   36   2                      {
   37   3                              //µç¸ÐÊý¾Ý²É¼¯
   38   3                  //Menu_ADC_test();
   39   3                              // //ÍÓÂÝÒÇÊý¾Ý²É¼¯
   40   3      //                       ICM_OneOrderFilter();   
   41   3      //               pwm_duty(PWMB_CH4_P77, 600);                                           
   42   3      //               pwm_duty(PWMB_CH3_P33, 600); 
   43   3                               //hinder_judge(); 
   44   3                               //Magnet_Judge();     
   45   3                              // //µç¸ÐÆ«²î¼ÆËã
   46   3                              //get_error_normal(&car.adc_parameter); //¼ÆËãÆ«²î      
   47   3                              // car.steering.error_now = car.adc_parameter.adc_error ;
   48   3                              // //·½Ïò»·¼ÆËã 
   49   3                              // car.steering.duty = car.steering.linear_error_kp   *car.steering.error_now +                                                         //Ò»´ÎÆ«²î  
             - 
   50   3                              //                                  car.steering.quadratic_error_kp*car.steering.error_now*abs(car.steering.error_now) +    //¶
             -þ´ÎÆ«²î
   51   3                              //                                  car.steering.error_kd*(car.steering.error_now - car.steering.error_last) -                      //Æ«²î²î·
             -Ö
   52   3                              //                                  car.steering.gyro_kp *icmdata.YawVelocity;                                                                                          //ÍÓÂÝÒÇÒÖÖÆ
   53   3                              // car.steering.error_last = car.steering.error_now;
   54   3                              // //×ªÏòPWMÏÞ·ù
C251 COMPILER V5.60.0,  isr                                                                01/11/23  17:00:44  PAGE 2   

   55   3                              // if(car.steering.duty>MOTOR_DUTY_MAX)car.steering.duty=MOTOR_DUTY_MAX;
   56   3                              // else if(car.steering.duty<-MOTOR_DUTY_MAX)car.steering.duty=-MOTOR_DUTY_MAX;
   57   3                              // //µç»ú¿ØËÙ
   58   3                              // //ËÙ¶È²âÁ¿
   59   3      //                       EncoderPulseGet(); 
   60   3                              //motor_control(-250,-150);//±Õ»·ËÙ¶È150
   61   3                              //Stop_after(2);
   62   3                              // MotorPWM_Out(car.motor_average.duty, car.motor_average.duty);
   63   3                              //MotorPWM_Out(1000,2000);
   64   3                              // if(car.distance>100){
   65   3                              //      block_judge();
   66   3                              // }
   67   3                              
   68   3      
   69   3                              break;
   70   3                      }
   71   2                      case REMOTE:    //Ò£¿ØÄ£Ê½
   72   2                      {
   73   3                              break;
   74   3                      }
   75   2              }
   76   1      
   77   1      //    if(type_temp != car.road_type)
   78   1      //        {
   79   1      //            ips114_clear(WHITE);
   80   1      //            type_temp = car.road_type;
   81   1      //            switch(car.road_type)
   82   1      //            {
   83   1      //                      case OUT_GARAGE:
   84   1      //                ips114_showstr(0, 0, "³ö¿â\n");
   85   1      //                              break;  
   86   1      //                      case STRAIGHT :                 
   87   1      //                ips114_showstr(0, 0, "Ö±µÀ\n");
   88   1      //                              break;  
   89   1      //                      case CIRCLE:
   90   1      //                ips114_showstr(0, 0, "»·µº\n");
   91   1      //                              break;  
   92   1      ////                    case FORK :
   93   1      ////                            //printf("chaÂ·\n");
   94   1      ////                            break;  
   95   1      ////                    case STRAIGHT_FORK:
   96   1      ////                            //printf("chaÂ·ÄÚ\n");
   97   1      ////                            break;  
   98   1      //                      case ENTER_GARAGE :
   99   1      //                ips114_showstr(0, 0, "Èë¿â\n");
  100   1      
  101   1      //                              break;  
  102   1      ////                    case CROSS :
  103   1      ////                            //printf("Ê®×Ö\n");
  104   1      ////                            break;  
  105   1      //                      case RAMP:
  106   1      //                ips114_showstr(0, 0, "ÆÂµÀ\n");
  107   1      //                              break;  
  108   1      //            }
  109   1      //        }
  110   1      
  111   1      //      //¸üÐÂ±êÖ¾Î» ÓÃÓÚÆÁÄ»¶¨Ê±Ë¢ÐÂ
  112   1      //      if(car.screen.ready==0)
  113   1      //      {
  114   1      //              car.screen.count++;
  115   1      //              if(car.screen.count >= 200/car.screen.fps)
  116   1      //              {
  117   1      //                      car.screen.count = 0;
  118   1      //                      car.screen.ready = 1;
  119   1      //              }
  120   1      //      }
C251 COMPILER V5.60.0,  isr                                                                01/11/23  17:00:44  PAGE 3   

  121   1      //      USART4_RX_STA = EMPTY;
  122   1      }
  123          
  124          //UART1ÖÐ¶Ï
  125          void UART1_Isr() interrupt 4
  126          {
  127   1          uint8 res;
  128   1              static uint8 dwon_count;
  129   1          if(UART1_GET_TX_FLAG)
  130   1          {
  131   2              UART1_CLEAR_TX_FLAG;
  132   2              busy[1] = 0;
  133   2          }
  134   1          if(UART1_GET_RX_FLAG)
  135   1          {
  136   2              UART1_CLEAR_RX_FLAG;
  137   2              res = SBUF;
  138   2              //³ÌÐò×Ô¶¯ÏÂÔØ
  139   2              if(res == 0x7F)
  140   2              {
  141   3                  if(dwon_count++ > 20)
  142   3                      IAP_CONTR = 0x60;
  143   3              }
  144   2              else
  145   2              {
  146   3                  dwon_count = 0;
  147   3              }
  148   2          }
  149   1      }
  150          
  151          //UART2ÖÐ¶Ï
  152          void UART2_Isr() interrupt 8
  153          {
  154   1          if(UART2_GET_TX_FLAG)
  155   1              {
  156   2              UART2_CLEAR_TX_FLAG;
  157   2                      busy[2] = 0;
  158   2              }
  159   1          if(UART2_GET_RX_FLAG)
  160   1              {
  161   2              UART2_CLEAR_RX_FLAG;
  162   2                      //½ÓÊÕÊý¾Ý¼Ä´æÆ÷Îª£ºS2BUF
  163   2      
  164   2              }
  165   1      }
  166          
  167          
  168          //UART3ÖÐ¶Ï
  169          void UART3_Isr() interrupt 17
  170          {
  171   1          if(UART3_GET_TX_FLAG)
  172   1              {
  173   2              UART3_CLEAR_TX_FLAG;
  174   2                      busy[3] = 0;
  175   2              }
  176   1          if(UART3_GET_RX_FLAG)
  177   1              {
  178   2              UART3_CLEAR_RX_FLAG;
  179   2                      //½ÓÊÕÊý¾Ý¼Ä´æÆ÷Îª£ºS3BUF
  180   2      
  181   2              }
  182   1      }
  183          
  184          
  185          //UART4ÖÐ¶Ï
  186          void UART4_Isr() interrupt 18
C251 COMPILER V5.60.0,  isr                                                                01/11/23  17:00:44  PAGE 4   

  187          {
  188   1          if(UART4_GET_TX_FLAG)
  189   1              {
  190   2              UART4_CLEAR_TX_FLAG;
  191   2                      busy[4] = 0;
  192   2              }
  193   1          if(UART4_GET_RX_FLAG)
  194   1              {
  195   2              UART4_CLEAR_RX_FLAG;
  196   2      
  197   2                      //½ÓÊÕÊý¾Ý¼Ä´æÆ÷Îª£ºS4BUF;
  198   2                      if(wireless_type == WIRELESS_SI24R1)
  199   2              {
  200   3                  wireless_uart_callback();           //ÎÞÏß×ª´®¿Ú»Øµ÷º¯Êý
  201   3              }
  202   2              else if(wireless_type == WIRELESS_CH9141)
  203   2              {
  204   3                  bluetooth_ch9141_uart_callback();   //À¶ÑÀ×ª´®¿Ú»Øµ÷º¯Êý
  205   3              }
  206   2              else if(wireless_type == WIRELESS_CH573)
  207   2              {
  208   3                  wireless_ch573_callback();          //CH573ÎÞÏßÄ£¿é»Øµ÷º¯Êý
  209   3              }
  210   2              }
  211   1      }
  212          
  213          void INT1_Isr() interrupt 2
  214          {
  215   1      
  216   1      }
  217          void INT2_Isr() interrupt 10
  218          {
  219   1              INT2_CLEAR_FLAG;  //Çå³ýÖÐ¶Ï±êÖ¾
  220   1      }
  221          void INT3_Isr() interrupt 11
  222          {
  223   1              INT3_CLEAR_FLAG;  //Çå³ýÖÐ¶Ï±êÖ¾
  224   1      }
  225          
  226          void INT4_Isr() interrupt 16
  227          {
  228   1              INT4_CLEAR_FLAG;  //Çå³ýÖÐ¶Ï±êÖ¾
  229   1      }
  230          
  231          void TM0_Isr() interrupt 1
  232          {
  233   1      
  234   1      }
  235          void TM1_Isr() interrupt 3
  236          {
  237   1      
  238   1      }
  239          void TM2_Isr() interrupt 12
  240          {
  241   1              TIM2_CLEAR_FLAG;  //Çå³ýÖÐ¶Ï±êÖ¾
  242   1              
  243   1      }
  244          void TM3_Isr() interrupt 19
  245          {
  246   1              TIM3_CLEAR_FLAG; //Çå³ýÖÐ¶Ï±êÖ¾
  247   1              
  248   1      }
  249          
  250          ////UART4ÖÐ¶Ï
  251          //void UART4_Isr() interrupt 18
  252          //{
C251 COMPILER V5.60.0,  isr                                                                01/11/23  17:00:44  PAGE 5   

  253          
  254          ////    uint8 res;
  255          ////    if(UART4_GET_TX_FLAG)
  256          ////    {
  257          ////            UART4_CLEAR_TX_FLAG;
  258          ////            busy[4] = 0;
  259          ////    }
  260          ////    if(UART4_GET_RX_FLAG)
  261          ////    {
  262          ////        UART4_CLEAR_RX_FLAG;
  263          ////            res = WIRELESS_DATA_BUF;
  264          ////            if(USART4_RX_STA == EMPTY)
  265          ////            {
  266          ////                    uart4_rx_buff[USART4_RX_LEN++] = res;
  267          ////                    USART4_RX_STA = RECEIVING;
  268          ////            }
  269          ////            else if(USART4_RX_STA == RECEIVING)
  270          ////            {
  271          ////                    uart4_rx_buff[USART4_RX_LEN++] = res;
  272          ////                    if(uart4_rx_buff[USART4_RX_LEN-1]==0x0a)
  273          ////                    {
  274          ////                            if(USART4_RX_LEN>=2 && uart4_rx_buff[USART4_RX_LEN-2]==0x0d )
  275          ////                            {
  276          ////                                    USART4_RX_STA = RECEIVING_COMPLETED;
  277          ////                            }
  278          ////                    }
  279          ////            }
  280          ////    }
  281          //}
  282          //      
  283          
  284          
  285          
  286          
  287          
  288          
  289          
  290          
  291          
  292          
  293          
  294          ////UART1ÖÐ¶Ï
  295          //void UART1_Isr() interrupt 4
  296          //{
  297          //    uint8 res;
  298          //      static uint8 dwon_count;
  299          //    if(UART1_GET_TX_FLAG)
  300          //    {
  301          //        UART1_CLEAR_TX_FLAG;
  302          //        busy[1] = 0;
  303          //    }
  304          //    if(UART1_GET_RX_FLAG)
  305          //    {
  306          //        UART1_CLEAR_RX_FLAG;
  307          //        res = SBUF;
  308          //        //³ÌÐò×Ô¶¯ÏÂÔØ
  309          //        // if(res == 0x7F)
  310          //        // {
  311          //        //     if(dwon_count++ > 20)
  312          //        //         IAP_CONTR = 0x60;
  313          //        // }
  314          //        // else
  315          //        // {
  316          //        //     dwon_count = 0;
  317          //        // }
  318          ////    
C251 COMPILER V5.60.0,  isr                                                                01/11/23  17:00:44  PAGE 6   

  319          ////            if((USART_RX_STA&0x8000) == 0){//½ÓÊÕÎ´Íê³É
  320          ////                            if(USART_RX_STA<(UART1_RX_BUFFER_SIZE)){
  321          ////                                      TL1 = 0x00;
  322          ////                                            TH1 = 0x00;
  323          ////                                            if(USART_RX_STA == 0){
  324          ////                                                    pit_timer_ms(TIM_1, 10); //´ò¿ª¶¨Ê±Æ÷3
  325          ////                                            }
  326          ////                                            uart1_rx_buff[USART_RX_STA++]=res;//¼ÇÂ¼½ÓÊÕµ½µÄÖµ
  327          ////                            }
  328          ////                            else{
  329          ////                                    USART_RX_STA|=0x8000; //³¬³ö»º´æÈÝÁ¿ Ç¿ÖÆ±ê¼ÇÎª½ÓÊÕÍê³É
  330          ////                            }       
  331          ////            }
  332          //      }
  333          //}
  334          
  335          ////UART2ÖÐ¶Ï
  336          //void UART2_Isr() interrupt 8
  337          //{
  338          //    if(UART2_GET_TX_FLAG)
  339          //      {
  340          //        UART2_CLEAR_TX_FLAG;
  341          //              busy[2] = 0;
  342          //      }
  343          //    if(UART2_GET_RX_FLAG)
  344          //      {
  345          //        UART2_CLEAR_RX_FLAG;
  346          //              //½ÓÊÕÊý¾Ý¼Ä´æÆ÷Îª£ºS2BUF
  347          
  348          //      }
  349          //}
  350          
  351          ////UART3ÖÐ¶Ï
  352          //void UART3_Isr() interrupt 17
  353          //{
  354          //    if(UART3_GET_TX_FLAG)
  355          //      {
  356          //        UART3_CLEAR_TX_FLAG;
  357          //              busy[3] = 0;
  358          //      }
  359          //    if(UART3_GET_RX_FLAG)
  360          //      {
  361          //        UART3_CLEAR_RX_FLAG;
  362          //              //½ÓÊÕÊý¾Ý¼Ä´æÆ÷Îª£ºS3BUF
  363          
  364          //      }
  365          //}
  366          //      
  367          
  368          //              
  369          //      
  370          
  371          
  372          //void INT0_Isr() interrupt 0
  373          //{
  374          //      INT0_CLEAR_FLAG;
  375          
  376          //}
  377          
  378          
  379          
  380          //void INT1_Isr() interrupt 2
  381          //{
  382          //      static int back = 0;
  383          //      INT1_CLEAR_FLAG;
  384          
C251 COMPILER V5.60.0,  isr                                                                01/11/23  17:00:44  PAGE 7   

  385          
  386          //}
  387          ////Íâ²¿ÖÐ¶Ï2  
  388          //void INT2_Isr() interrupt 10
  389          //{
  390          //      INT2_CLEAR_FLAG;  //Çå³ýÖÐ¶Ï±êÖ¾
  391          
  392          //}
  393          
  394          //void INT3_Isr() interrupt 11
  395          //{
  396          //      INT3_CLEAR_FLAG;  //Çå³ýÖÐ¶Ï±êÖ¾
  397          //}
  398          
  399          //void INT4_Isr() interrupt 16
  400          //{
  401          //      INT4_CLEAR_FLAG;  //Çå³ýÖÐ¶Ï±êÖ¾
  402          //}
  403          
  404          //void TM0_Isr() interrupt 1  //ÎÞ·¨Ê¹ÓÃ ¶¨Ê±Æ÷0ÒÑÓÃÓÚ±àÂëÆ÷Íâ²¿¼ÆÊý
  405          //{
  406          //      
  407          //}
  408          
  409          //void TM1_Isr() interrupt 3     //ÓÃÓÚÍ¨ÐÅÍê³ÉÅÐ¶Ï
  410          //{
  411          ////    static int count = 0;
  412          ////    count++;
  413          ////    if(count >= 50){
  414          ////            count = 0;
  415          ////            USART_RX_STA |=0x8000;          //±ê¼Ç½ÓÊÕÍê³É
  416          ////            USART4_RX_STA |=0x8000;         //±ê¼Ç½ÓÊÕÍê³É
  417          ////            car.uart_busy = 0;
  418          ////            TR1 = 0; //¹Ø±Õ¶¨Ê±Æ÷
  419          ////    }
  420          //}
  421          
  422          //void TM2_Isr() interrupt 12  //ÓÃÓÚ´®¿Ú4µÄ²¨ÌØÂÊ²úÉú
  423          //{
  424          //      TIM2_CLEAR_FLAG;  //Çå³ýÖÐ¶Ï±êÖ¾
  425          //}
  426          
  427          //void TM3_Isr() interrupt 19 //ÎÞ·¨Ê¹ÓÃ ¶¨Ê±Æ÷3ÒÑÓÃÓÚ±àÂëÆ÷Íâ²¿¼ÆÊý
  428          //{
  429          //      TIM3_CLEAR_FLAG; //Çå³ýÖÐ¶Ï±êÖ¾
  430          //}
  431          ////extern void pit_handler(void);
  432          ////void TM4_Isr() interrupt 20
  433          ////{
  434          ////    TIM4_CLEAR_FLAG; //Çå³ýÖÐ¶Ï±êÖ¾
  435          //////  ccd_collect();   //CCD²É¼¯Êý¾Ý
  436          
  437          ////    pit_handler();
  438          ////}
  439          
  440          
  441          
  442          
  443          
  444          
  445          
  446          //void  INT0_Isr()  interrupt 0;
  447          //void  TM0_Isr()   interrupt 1;
  448          //void  INT1_Isr()  interrupt 2;
  449          //void  TM1_Isr()   interrupt 3;
  450          //void  UART1_Isr() interrupt 4;
C251 COMPILER V5.60.0,  isr                                                                01/11/23  17:00:44  PAGE 8   

  451          //void  ADC_Isr()   interrupt 5;
  452          //void  LVD_Isr()   interrupt 6;
  453          //void  PCA_Isr()   interrupt 7;
  454          //void  UART2_Isr() interrupt 8;
  455          //void  SPI_Isr()   interrupt 9;
  456          //void  INT2_Isr()  interrupt 10;
  457          //void  INT3_Isr()  interrupt 11;
  458          //void  TM2_Isr()   interrupt 12;
  459          //void  INT4_Isr()  interrupt 16;
  460          //void  UART3_Isr() interrupt 17;
  461          //void  UART4_Isr() interrupt 18;
  462          //void  TM3_Isr()   interrupt 19;
  463          //void  TM4_Isr()   interrupt 20;
  464          //void  CMP_Isr()   interrupt 21;
  465          //void  I2C_Isr()   interrupt 24;
  466          //void  USB_Isr()   interrupt 25;
  467          //void  PWM1_Isr()  interrupt 26;
  468          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       329     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        17     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        44     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
